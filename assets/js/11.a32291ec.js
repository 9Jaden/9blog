(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{403:function(t,s,a){t.exports=a.p+"assets/img/gmall.a8d00c72.png"},430:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"gmall电商平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gmall电商平台"}},[t._v("#")]),t._v(" GMALL电商平台")]),t._v(" "),s("p",[t._v("项目为包括首页、搜索列表、商品详情页、购物车、订单、支付、用户登录/注册等多个子模块的在线电商 SPA，项目采用模块化、组件化、工程化的模式开发")]),t._v(" "),s("h3",{attrs:{id:"项目展示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目展示"}},[t._v("#")]),t._v(" 项目展示")]),t._v(" "),s("p",[s("img",{attrs:{src:a(403),alt:"An image"}})]),t._v(" "),s("h3",{attrs:{id:"技术栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技术栈"}},[t._v("#")]),t._v(" 技术栈")]),t._v(" "),s("p",[t._v("Vuex + vue-router + Mock.js+ Axios + Swiper + Element-ui")]),t._v(" "),s("h3",{attrs:{id:"重点功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重点功能"}},[t._v("#")]),t._v(" 重点功能")]),t._v(" "),s("blockquote",[s("p",[t._v("使用 vue-router 实现页面路由跳转构建单页面应用，并设立导航守卫拦截不合理路由跳转")]),t._v(" "),s("p",[t._v("通过面包屑词条增删以及点击排序实现交互性高的商品搜索页面")]),t._v(" "),s("p",[t._v("利用组件通信对非业务逻辑功能的组件（如轮播图、分页器等）进行抽离和封装")]),t._v(" "),s("p",[t._v("封装 axios 请求，添加 token 字段实现用户独立数据管理与呈现")])]),t._v(" "),s("h3",{attrs:{id:"项目跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目跨域"}},[t._v("#")]),t._v(" 项目跨域")]),t._v(" "),s("p",[t._v("用webpack开发配置proxy API代理解决跨域问题，webpack-dev-server，服务端是别人的")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("transpileDependencies")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lintOnSave")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理服务器实现跨域")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("devServer")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("proxy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"/api"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要去获取数据的ip地址")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("target")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://gmall-h5-api.atguigu.cn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// pathRewrite: { "^/api": "" },')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// host: "0.0.0.0",')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// port: 3000,")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// client: {")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   WebSocketURL: "ws://192.168.1.4:3000/ws",')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// },")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// headers: { "Access-Control-Allow-Origin": "*" },')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"导航守卫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导航守卫"}},[t._v("#")]),t._v(" 导航守卫")]),t._v(" "),s("p",[s("strong",[t._v("全局守衛")]),t._v("router.beforeEach方法，传入参数主要有to，from和next")]),t._v(" "),s("p",[t._v("首先从store的state中获取到当前token，若已有token即已经登录，所以如果要"),s("strong",[t._v("to")]),t._v("到login登录页，直接跳转到home首页，"),s("strong",[t._v("防止重复登录")]),t._v("，")]),t._v(" "),s("p",[t._v("**登录失效：**还可以在beforeEach中发送请求获取用户信息，如果请求失败发现token失效则退出登录直接跳转到登录页")]),t._v(" "),s("p",[s("strong",[t._v("未登錄："),s("strong",[t._v("如果是没有获取到token则如果用户想去一些私人页面，比如支付、购物车等页面将跳转到login登录页，且设置/login")]),t._v("?redirect")]),t._v("=+ path，返回之前准备去的页面")]),t._v(" "),s("p",[t._v("还有"),s("strong",[t._v("路由内")]),t._v("beforeEnter方法，比如在要前往pay支付页前判断是否from来自交易详情页面，否则next(false)无法前往")]),t._v(" "),s("p",[t._v("以及"),s("strong",[t._v("组件内")]),t._v("的beforeRouteEnter方法，在支付成功页面判别是否from支付页面，否则next(false)")]),t._v(" "),s("h3",{attrs:{id:"面包屑词条增删和点击排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面包屑词条增删和点击排序"}},[t._v("#")]),t._v(" 面包屑词条增删和点击排序")]),t._v(" "),s("p",[t._v("在带给服务器的请求中含有搜索参数，")]),t._v(" "),s("p",[t._v("点击页面商品描述词条后将描述商品的词条字段添加进搜索参数中，然后根据data里的搜索参数通过v-if显示面包屑，")]),t._v(" "),s("p",[t._v("在每一次增删面包屑/词条时都带着新的搜索参数重新dispatch请求，实时更新搜索到的商品")]),t._v(" "),s("p",[s("strong",[t._v("排序实现")]),t._v(":在搜索参数中同时带有代表排序的order参数，当点击排序按钮（价格、总和）时更改order参数，重新发送请求以新的顺序重新展示商品")]),t._v(" "),s("h3",{attrs:{id:"非业务逻辑组件封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非业务逻辑组件封装"}},[t._v("#")]),t._v(" 非业务逻辑组件封装")]),t._v(" "),s("h4",{attrs:{id:"分页器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分页器"}},[t._v("#")]),t._v(" 分页器")]),t._v(" "),s("p",[s("strong",[t._v("主要由上一页下一页、...、连续页码若干个、第一页和最后一页组成")])]),t._v(" "),s("p",[t._v("首先通过props传递参数，比如分页器需要知道总页数（商品总数除以每页展示数目pageSize），当前页码，连续页码数（5）")]),t._v(" "),s("p",[t._v("很重要的自定义事件通信以获得当前所在页码，其次当点击分页器页码按钮时emit自定义事件更改当前页面，在重新发起请求展示数据")]),t._v(" "),s("p",[t._v("需要computed计算连续页码起始与结束数字---\x3e当前页码加/减连续页码数的一半，并且对于接近第一页（start为1，end为连续页码数）或者最后也一页特殊处理")]),t._v(" "),s("p",[t._v("掌握start与end数字后通过v-for展示连续页码数5个，并且对于页码数===当前页码数的button赋予active样式。")]),t._v(" "),s("p",[t._v("而...判别为计算出的start页码大于2与否，end小于总页数-1与否。")]),t._v(" "),s("p",[t._v("对于上一页和下一页要判断是否到达第一页或者最后一页，给其赋予disabled")]),t._v(" "),s("h4",{attrs:{id:"轮播图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轮播图"}},[t._v("#")]),t._v(" 轮播图")]),t._v(" "),s("p",[t._v("而轮播图主要利用swiper插件实现，也是通过props获得页面需要展示的list后v-for展示出来，一个points是如果数据已经修改了但是页面没有跟着渲染则利用$nextTick即可")]),t._v(" "),s("h3",{attrs:{id:"封装axios请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装axios请求"}},[t._v("#")]),t._v(" 封装axios请求")]),t._v(" "),s("p",[s("strong",[t._v("添加token字段，如何实现用户独立数据管理与呈现？")])]),t._v(" "),s("p",[t._v("请求拦截器，在发送请求前做一些事情，interceptors给config的headers请求头添加一个字段，即添加用户独立的token（相当于是对每个接口里相同操作的一个封装）")]),t._v(" "),s("p",[t._v("还有返回拦截器，接口返回后做的处理，比如对返回的状态进行判断，token过期与否")]),t._v(" "),s("h3",{attrs:{id:"注册-表单验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册-表单验证"}},[t._v("#")]),t._v(" 注册---表单验证")]),t._v(" "),s("p",[t._v("通过v-validate实现，配合正则表达式，validateAll()时才success")]),t._v(" "),s("h3",{attrs:{id:"mock-js和element-ui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mock-js和element-ui"}},[t._v("#")]),t._v(" mock.js和element-ui")]),t._v(" "),s("p",[t._v("通过mock.js模拟商城首页的一些商品展示图片，模拟数据以json文件形式传入，同样用axios封装mock请求，只不过在axios.create时更改baseURL")]),t._v(" "),s("p",[t._v("mock后需要在入口文件引入则可返回请求返回数据")]),t._v(" "),s("p",[t._v("通过element-ui引入了Button按钮组件以及MessageBox及其alert，比如在支付时弹出支付成功等信息")]),t._v(" "),s("p",[t._v("引入方式：1. 在入口文件处用Vue.component()注册全局组件或者2.挂载在原型上")]),t._v(" "),s("p",[t._v("router-view标签展示路由组件")]),t._v(" "),s("p",[t._v("mapGetters mapState mapSetters")]),t._v(" "),s("p",[t._v("分别为组件获得getters、state里数据的方法以便更简洁的获取")])])}),[],!1,null,null,null);s.default=r.exports}}]);