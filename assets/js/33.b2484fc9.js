(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{438:function(_,v,t){"use strict";t.r(v);var s=t(2),r=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"osi七层模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#osi七层模型"}},[_._v("#")]),_._v(" OSI七层模型")]),_._v(" "),v("p",[_._v("Open System Interconnection，国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系")]),_._v(" "),v("p",[_._v("七层模型从上到下依次是：")]),_._v(" "),v("p",[_._v("常见协议及所在层：")]),_._v(" "),v("p",[_._v("http---应用层")]),_._v(" "),v("p",[_._v("tcp、udp---传输层")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("应用层")]),_._v("：协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP")]),_._v(" "),v("li",[v("strong",[_._v("表示层")]),_._v("：数据的表示、安全、压缩。格式有，JPEG、ASCll、DECOIC、加密格式等")]),_._v(" "),v("li",[v("strong",[_._v("会话层")]),_._v("：建立、管理、终止会话。对应主机进程，指本地主机与远程主机正在进行的会话")]),_._v(" "),v("li",[v("strong",[_._v("传输层")]),_._v("：定义传输数据的协议端口号，以及流控和差错校验。协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层")]),_._v(" "),v("li",[v("strong",[_._v("网络层")]),_._v("：IP地址和路由选择，进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP")]),_._v(" "),v("li",[v("strong",[_._v("数据链路层")]),_._v("：建立逻辑连接、进行硬件地址寻址、差错校验等功能。将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。")]),_._v(" "),v("li",[v("strong",[_._v("物理层")]),_._v("：建立、维护、断开物理连接。")])]),_._v(" "),v("h2",{attrs:{id:"websocket"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[_._v("#")]),_._v(" websocket")]),_._v(" "),v("p",[_._v("HTTP协议中的四大特性中有"),v("strong",[_._v("无链接")]),_._v("：一次请求一次响应后断开链接，因此基于HTTP协议实现服务端给客户端主动推送消息有点麻烦")]),_._v(" "),v("p",[v("strong",[_._v("是一种在单个 TCP 连接上进行 全双工 通信的协议")])]),_._v(" "),v("p",[_._v("websocket的长连接，是一个"),v("strong",[_._v("真的全双工")]),_._v("。 长连接第一次tcp链路建立之后，后续数据可以双方都进行发送，不需要发送请求头。 keep-alive双方并没有建立正真的连接会话，服务端可以在任何一次请求完成后关闭。 WebSocket 它本身就规定了是真正的、双工的长连接，两边都必须要维持住连接的状态。")]),_._v(" "),v("p",[_._v("双全工--- 通信允许数据在两个方向上同时传输")]),_._v(" "),v("h2",{attrs:{id:"http和https的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别"}},[_._v("#")]),_._v(" http和https的区别")]),_._v(" "),v("p",[_._v("http明文传输未加密，安全性较差，不适合传输敏感信息")]),_._v(" "),v("p",[_._v("超文本传输**(安全)**协议")]),_._v(" "),v("p",[_._v("https则是经由http通信，但利用"),v("strong",[_._v("SSL/TLS")]),_._v("进行加密数据包")]),_._v(" "),v("p",[_._v("https开发主要目的：提供对网站服务器的"),v("strong",[_._v("身份认证")]),_._v("，保证"),v("strong",[_._v("数据隐私和完整")])]),_._v(" "),v("h2",{attrs:{id:"http消息头content-type"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http消息头content-type"}},[_._v("#")]),_._v(" http消息头content-type")]),_._v(" "),v("p",[_._v("Content-Type来表示具体请求中的媒体类型信息")]),_._v(" "),v("p",[_._v("例如： Content-Type: text/html; charset:utf-8")]),_._v(" "),v("p",[_._v("表示内容是html格式的内容，字符集是utf-8")]),_._v(" "),v("p",[_._v("除了text还有image/png；application:json等")]),_._v(" "),v("h2",{attrs:{id:"https加密过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https加密过程"}},[_._v("#")]),_._v(" https加密过程")]),_._v(" "),v("p",[_._v("HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据")]),_._v(" "),v("p",[v("strong",[_._v("为什么需要加密")]),_._v("：http的内容是明文传输的，可能在传输过程中被劫持，遭遇中间人攻击（纂改传输的信息且不被双方察觉）所以需要加密")]),_._v(" "),v("p",[v("strong",[_._v("对称加密---速度快")]),_._v("：加密解密所用秘钥相同，问题是如何使此秘钥让传输双方知道且不被其他人知道")]),_._v(" "),v("p",[v("strong",[_._v("非对称加密---安全")]),_._v("：两把秘钥，一把公钥一把私钥，用公钥加密的内容必须用私钥才能解开，同样，私钥加密的内容只有公钥能解开")]),_._v(" "),v("p",[_._v("仅通过非对称加密只能保证"),v("strong",[_._v("由浏览器向服务器传输数据的安全性")]),_._v("：服务端将公钥通过明文传输的方式给客户端，客户端用公钥加密后，服务端就可以用自己已有的私钥解密，这样是安全的，但是服务端若要给客户端用私钥加密后传输数据，"),v("strong",[_._v("明文传输的公钥")]),_._v("可能遭遇中间人劫持而不安全")]),_._v(" "),v("h3",{attrs:{id:"非对称加密-对称加密"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密-对称加密"}},[_._v("#")]),_._v(" "),v("strong",[_._v("非对称加密+对称加密")])]),_._v(" "),v("ol",[v("li",[_._v("某网站拥有用于非对称加密的公钥A、私钥A’。")]),_._v(" "),v("li",[_._v("浏览器向网站服务器请求，服务器把公钥A明文给传输浏览器。")]),_._v(" "),v("li",[_._v("浏览器随机生成一个用于对称加密的密钥X，用公钥A加密后传给服务器。")]),_._v(" "),v("li",[_._v("服务器拿到后用私钥A’解密得到密钥X。")]),_._v(" "),v("li",[_._v("这样双方就都拥有密钥X了，且别人无法知道它。之后双方所有数据都通过密钥X加密解密即可。")])]),_._v(" "),v("h3",{attrs:{id:"中间人攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[_._v("#")]),_._v(" 中间人攻击")]),_._v(" "),v("ol",[v("li",[_._v("某网站有用于非对称加密的公钥A、私钥A’。")]),_._v(" "),v("li",[_._v("浏览器向网站服务器请求，服务器把公钥A明文给传输浏览器。")]),_._v(" "),v("li",[v("strong",[_._v("中间人劫持到公钥A，保存下来，把数据包中的公钥A替换成自己伪造的公钥B（它当然也拥有公钥B对应的私钥B’）")]),_._v("。")]),_._v(" "),v("li",[_._v("浏览器生成一个用于对称加密的密钥X，用"),v("strong",[_._v("公钥B")]),_._v("（浏览器无法得知公钥被替换了）加密后传给服务器。")]),_._v(" "),v("li",[v("strong",[_._v("中间人劫持后用私钥B’解密得到密钥X，再用公钥A加密后传给服务器")]),_._v("。")]),_._v(" "),v("li",[_._v("服务器拿到后用私钥A’解密得到密钥X。")])]),_._v(" "),v("p",[_._v("双方都不会发现异常的情况下，“狸猫换太子”，掉包了服务器传来的公钥，进而得到了密钥X")]),_._v(" "),v("p",[v("strong",[_._v("根本原因")]),_._v("："),v("strong",[_._v("浏览器无法确认收到的公钥是不是网站自己的---数字证书")])]),_._v(" "),v("h3",{attrs:{id:"数字证书"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数字证书"}},[_._v("#")]),_._v(" 数字证书")]),_._v(" "),v("p",[_._v("网站在使用HTTPS前，需要向"),v("strong",[_._v("CA机构")]),_._v("申领一份"),v("strong",[_._v("数字证书")]),_._v("，数字证书里含有证书持有者信息、公钥信息等，服务器把证书传输给浏览器，浏览器从证书里获取公钥就行了")]),_._v(" "),v("p",[v("strong",[_._v("问题")]),_._v("：“"),v("strong",[_._v("证书本身的传输过程中，如何防止被篡改”")]),_._v("？即如何证明证书本身的真实性，数字证书如何防伪---"),v("strong",[_._v("数字签名")])]),_._v(" "),v("h3",{attrs:{id:"数字签名"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数字签名"}},[_._v("#")]),_._v(" 数字签名")]),_._v(" "),v("p",[_._v("数字签名制作过程：")]),_._v(" "),v("ol",[v("li",[_._v("CA机构拥有非对称加密的私钥和公钥。")]),_._v(" "),v("li",[_._v("CA机构对证书明文数据T进行hash。")]),_._v(" "),v("li",[_._v("对hash后的值用私钥加密，得到数字签名S")])]),_._v(" "),v("p",[_._v("浏览器验证过程：")]),_._v(" "),v("ol",[v("li",[_._v("拿到证书，得到明文T，签名S。")]),_._v(" "),v("li",[_._v("用CA机构的公钥对S解密（由于是浏览器信任的机构，所以浏览器保有它的公钥），得到S’。")]),_._v(" "),v("li",[_._v("用证书里指明的hash算法对明文T进行hash得到T’。")]),_._v(" "),v("li",[_._v("显然通过以上步骤，T’应当等于S‘，除非明文或签名被篡改。所以此时比较S’是否等于T’，等于则表明证书可信")])]),_._v(" "),v("p",[_._v("而中间人由于没有CA机构的私钥，所以无法得到此时加密后签名，无法相应地篡改签名。浏览器收到该证书后会发现原文和签名解密后的值不一致，则说明证书已被篡改，证书不可信，从而终止向服务器传输信息，防止信息泄露给中间人。")]),_._v(" "),v("p",[v("strong",[_._v("每次进行HTTPS请求时都")]),_._v("必须"),v("strong",[_._v("在SSL/TLS层进行握手传输密钥吗")])]),_._v(" "),v("p",[_._v("服务器会为每个浏览器（或客户端软件）维护一个session ID，在TLS握手阶段传给浏览器，浏览器生成好密钥传给服务器后，服务器会把该密钥存到相应的session ID下，之后浏览器每次请求都会携带session ID，服务器会根据session ID找到相应的密钥并进行解密加密操作，这样就不必要每次重新制作、传输密钥了")]),_._v(" "),v("p",[v("strong",[_._v("总结")])]),_._v(" "),v("p",[_._v("本质是通过非对称加密传输对称加密的秘钥")]),_._v(" "),v("p",[_._v("用非对称加密加密对称加密的秘钥发出，私钥解密密文得到对称加密的秘钥")]),_._v(" "),v("p",[_._v("客户端拥有非对称加密的公钥和私钥，将公钥明文传输给浏览器，浏览器随机生成一个用于对称加密的秘钥后，用该公钥加密后返回给客户端，客户端用已有的私钥解密后获得对称加密的秘钥，之后的数据加密与解密都使用该秘钥进行加密和解密。为了防止中间人攻击引入了数字证书和签名，其中"),v("strong",[_._v("数字证书（包含持有人信息和公钥信息）"),v("strong",[_._v("保证给浏览器的公钥确实来自客户端，而")]),_._v("数字签名")]),_._v("保证数字证书的可信，防伪。")]),_._v(" "),v("p",[_._v("采用非对称加密因为安全性，采用对称加密是因为他加解密速度快")]),_._v(" "),v("p",[v("strong",[_._v("详细")]),_._v("：整个过程涉及三种秘钥，客户端的非对称加密公钥私钥+浏览器随机生成对称加密秘钥+CA机构用于数字签名的非对称加密私钥（CA机构加密证书）公钥（浏览器受信任拥有，解密证书获得客户端的公钥加密随机生成对称秘钥）")]),_._v(" "),v("p",[_._v("为了使得浏览器确保自己收到的确实是来自客户端的，防止中间人攻击（狸猫换太子掉包），所以引入CA机构颁布的"),v("strong",[_._v("数字证书")]),_._v("（包含持有者信息以及公钥信息），所以"),v("strong",[_._v("直接传输证书")]),_._v("给浏览器用其中的公钥加密用于对称加密的秘钥后传输给客户端")]),_._v(" "),v("p",[_._v("而为了确保证书没有被纂改（防伪），又引入了"),v("strong",[_._v("数字签名")]),_._v("，是"),v("strong",[_._v("CA机构")]),_._v("率先对证书明文数据hash成签名后附加到数据里并且对其进行"),v("strong",[_._v("私钥加密")]),_._v("（CA机构方的私钥和秘钥），浏览器得到有数字签名的数字证书后，而被CA机构信任的浏览器拥有证书对应公钥所以可以对其解密，解密后将证书明文数据hash后对比与数字签名是否相同，相同则说明证书可信，可以使用该公钥对随机生成的对称加密的秘钥进行加密后传输给客户端。")]),_._v(" "),v("p",[_._v("最后客户端利用自己已有的私钥解密获得用于对称加密的秘钥，之后客户端和浏览器就可以用对称加密的秘钥（仅双方知道）进行数据的加密和解密")]),_._v(" "),v("h2",{attrs:{id:"tcp三次握手-建立连接-和四次挥手-断开连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手-建立连接-和四次挥手-断开连接"}},[_._v("#")]),_._v(" TCP三次握手（建立连接）和四次挥手（断开连接）")]),_._v(" "),v("p",[_._v("TCP传输控制协议：将数据流从一台主机可靠地传输到另一台主机")]),_._v(" "),v("p",[_._v("三次握手的主要目的是确认自己和对方的发送和接收都是正常的，从而保证了双方能够进行可靠通信。若采用两次握手，当第二次握手后就建立连接的话，此时客户端知道服务器能够正常接收到自己发送的数据，而服务器并不知道客户端是否能够收到自己发送的数据。")]),_._v(" "),v("p",[_._v("三次握手---三个包确认TCP连接---"),v("strong",[_._v("确认服务器端能够正常发送数据")])]),_._v(" "),v("blockquote",[v("ol",[v("li",[v("strong",[_._v("客户端")]),_._v("---SYN(SYNK？发起一个连接)---\x3e服务器端 (表示希望建立连接)")]),_._v(" "),v("li",[_._v("服务器端---SYN(同步)+ACK(应答，确认序号有效)---\x3e客户端 (确认客户端能正常发送数据，服务器端能正常接受)")]),_._v(" "),v("li",[_._v("客户端---ACK---\x3e服务器端（"),v("strong",[_._v("确认服务器端能够正常发送数据")]),_._v("）")])])]),_._v(" "),v("p",[_._v("四次挥手---四个包确认TCP连接断开---"),v("strong",[_._v("另一方数据可能没发送完")])]),_._v(" "),v("blockquote",[v("ol",[v("li",[_._v("客户端---FIN(释放一个连接)---\x3e服务器端（关闭客户端到服务器端的数据传送，没有数据可发了，但还可以接受数据）")]),_._v(" "),v("li",[_._v("服务器端---ACK---\x3e客户端（只是应答，"),v("strong",[_._v("但是数据可能没发送完")]),_._v("）")]),_._v(" "),v("li",[_._v("服务器端---FIN---\x3e客户端（发送完数据，关闭服务器端到客户端的数据传送）")]),_._v(" "),v("li",[_._v("客户端收到FIN---ACK---\x3e客户端（最后应答确认关闭）")])])]),_._v(" "),v("p",[_._v("之所以要四次挥手，因为一次挥手加确认，只代表一方不再发送数据，但另一方可能数据还没发送完，处理完后再一次挥手完成断开")]),_._v(" "),v("h2",{attrs:{id:"tcp和udp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp"}},[_._v("#")]),_._v(" TCP和UDP")]),_._v(" "),v("p",[_._v("TCP通信可看作打电话，UDP可看为学校里的广播")]),_._v(" "),v("p",[_._v("TCP点对点，UDP可以一对一也可以一对多还可以多对多")]),_._v(" "),v("p",[_._v("TCP/IP即传输控制/网络协议，是面向"),v("strong",[_._v("连接")]),_._v("的协议，发送数据前"),v("strong",[_._v("要先建立连接")])]),_._v(" "),v("p",[_._v("UDP是"),v("strong",[_._v("无连接")]),_._v("，的协议发送数据前不需要建立连接，是没有"),v("strong",[_._v("可靠性")]),_._v("的协议。因为不需要建立连接所以可以在在网络上以任何可能的路径传输，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的")]),_._v(" "),v("p",[_._v("应用场景：")]),_._v(" "),v("p",[_._v("对某些"),v("strong",[_._v("实时性")]),_._v("要求比较高的情况使用UDP，比如游戏，媒体通信，"),v("strong",[_._v("实时直播")]),_._v("，即使出现传输错误也可以容忍；")]),_._v(" "),v("p",[_._v("其它大部分情况下，"),v("strong",[_._v("HTTP")]),_._v("都是用TCP，因为要求传输的"),v("strong",[_._v("内容可靠，不出现丢失")]),_._v("的情况")]),_._v(" "),v("h2",{attrs:{id:"前端安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端安全问题"}},[_._v("#")]),_._v(" 前端安全问题")]),_._v(" "),v("p",[_._v("XSS跨站脚本攻击和CSRF跨站请求伪造")]),_._v(" "),v("p",[_._v("XSS攻击的主要核心是脚本，利用编程漏洞植入js脚本，获取用户敏感信息")]),_._v(" "),v("p",[_._v("CSRF攻击的主要核心是伪造，利用浏览器自动发送cookie的特性伪造用户身份")]),_._v(" "),v("p",[_._v("XSS预防"),v("strong",[_._v("从输入到输出都进行过滤、转义")]),_._v("，因为XSS攻击两道要素攻击者提交恶意代码、浏览器执行恶意代码")]),_._v(" "),v("p",[_._v("CSRF预防"),v("strong",[_._v("常用token令牌在请求时放到header")]),_._v("中")]),_._v(" "),v("h2",{attrs:{id:"http响应码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http响应码"}},[_._v("#")]),_._v(" http响应码")]),_._v(" "),v("p",[_._v("1开头：信息响应，100---continue客户端应继续发送请求")]),_._v(" "),v("p",[_._v("2开头：成功响应，200---ok服务器成功处理了请求")]),_._v(" "),v("p",[_._v("3开头：重定向响应，要完成请求还需要进一步操作，304---协商缓存---上次请求后页面未修改")]),_._v(" "),v("p",[_._v("4开头：客户端错误响应，404---服务器找不到请求的资源")]),_._v(" "),v("p",[_._v("5开头：服务端错误响应")]),_._v(" "),v("h2",{attrs:{id:"http各个版本特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http各个版本特性"}},[_._v("#")]),_._v(" http各个版本特性")]),_._v(" "),v("p",[_._v("http为超文本传输协议，是TCP/IP协议的一个应用层协议，定义浏览器与服务器之间交换数据的过程（通讯的格式），由请求和响应组成【请求方法、请求路径、http版本、请求头/响应头、消息主体】")]),_._v(" "),v("p",[_._v("0.9：第一个协议，已过时，没有协议头只支持纯文本，只有GET")]),_._v(" "),v("p",[_._v("1.0：至今广泛使用，任何格式都可以发送，引入POST和HEAD命令；通信包含头信息HTTP header；响应状态码")]),_._v(" "),v("p",[_._v("1.1：目前使用最广泛，新增默认"),v("strong",[_._v("长链接")]),_._v("；新增PUT/DELETE/OPTIONS等；管道机制（同一个TCP连接里客户端可以同时发送多个请求）"),v("strong",[_._v("复用TCP连接")])]),_._v(" "),v("p",[_._v("2.0：使用"),v("strong",[_._v("二进制")]),_._v("传送，而1.x为文本传送；"),v("strong",[_._v("头部压缩")]),_._v("（解决冗余量大问题）；支持多路复用（一个http请求实现多个http请求传输）；支持服务器推送（之前只能客户端单向发起）")]),_._v(" "),v("h3",{attrs:{id:"长链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#长链接"}},[_._v("#")]),_._v(" 长链接")]),_._v(" "),v("p",[_._v("所谓长连接，指"),v("strong",[_._v("在一个TCP连接上可以连续发送多个数据包，在TCP连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接")]),_._v("。 短连接是指通信双方有数据交互时，就建立一个TCP连接，数据发送完成后，则断开此TCP连接，即每次TCP连接只完成一对 CMPP消息的发送")]),_._v(" "),v("h2",{attrs:{id:"http队头阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http队头阻塞"}},[_._v("#")]),_._v(" http队头阻塞")]),_._v(" "),v("p",[_._v("虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是"),v("strong",[_._v("按次序")]),_._v('进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为"队头堵塞"（Head-of-line blocking）')]),_._v(" "),v("h3",{attrs:{id:"_2-0没有真正解决队头阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-0没有真正解决队头阻塞"}},[_._v("#")]),_._v(" 2.0没有真正解决队头阻塞：")]),_._v(" "),v("p",[_._v("使用 "),v("strong",[_._v("SPDY协议")]),_._v(" 作为 HTTP/2 的起点，并使用"),v("strong",[_._v("多路复用")]),_._v("（单个连接上可以进行并行交错的请求和响应，之间互不干扰），解决了队头阻塞的问题")]),_._v(" "),v("p",[v("strong",[_._v("根源问题")]),_._v("："),v("strong",[_._v("不过 TCP 本身的队头阻塞是无法避免的")]),_._v("，而且对其影响更大，因为"),v("strong",[_._v("多个同域名的请求都只会使用同一个 TCP 连接，不会有多个并行连接")])]),_._v(" "),v("h3",{attrs:{id:"http3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[_._v("#")]),_._v(" http3")]),_._v(" "),v("p",[_._v("不管是持久连接还是多路复用，都会受到 TCP 队头阻塞的影响，所以 HTTP/3 直接弃用 TCP 协议，"),v("strong",[_._v("改用基于 UDP协议 的 QUIC协议 来实现")])]),_._v(" "),v("p",[_._v("SPDY ---\x3e QUIC （speed->quick）")]),_._v(" "),v("h2",{attrs:{id:"http请求方式-get-post等"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http请求方式-get-post等"}},[_._v("#")]),_._v(" http请求方式---get post等")]),_._v(" "),v("p",[_._v("get：从服务端获取资源")]),_._v(" "),v("p",[_._v("post：向指定资源提交数据进行"),v("strong",[_._v("处理")]),_._v("请求，如提交表单或上传文件")]),_._v(" "),v("p",[_._v("options：得到目的资源所支持的通信选项（http请求方式）")]),_._v(" "),v("p",[_._v("还有put（向指定资源上传最新内容）和delete（删除Request-URL所标识的资源）")]),_._v(" "),v("h2",{attrs:{id:"进程和线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[_._v("#")]),_._v(" 进程和线程")]),_._v(" "),v("p",[_._v("进程：资源分配最小单位")]),_._v(" "),v("p",[_._v("线程：程序执行最小单位，包含在进程中")])])}),[],!1,null,null,null);v.default=r.exports}}]);